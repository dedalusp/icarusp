    Checking cfg-if v1.0.1
    Checking stable_deref_trait v1.2.0
    Checking smallvec v1.15.1
    Checking pin-project-lite v0.2.16
    Checking log v0.4.27
    Checking bytes v1.10.1
    Checking itoa v1.0.15
    Checking scopeguard v1.2.0
    Checking libc v0.2.174
    Checking futures-core v0.3.31
    Checking zerofrom v0.1.6
    Checking memchr v2.7.5
    Checking litemap v0.8.0
    Checking lock_api v0.4.13
    Checking once_cell v1.21.3
    Checking writeable v0.6.1
    Checking typenum v1.18.0
    Checking yoke v0.8.0
   Compiling fnv v1.0.7
    Checking percent-encoding v2.3.1
    Checking futures-sink v0.3.31
    Checking tracing-core v0.1.34
   Compiling darling_core v0.20.11
    Checking icu_normalizer_data v2.0.0
    Checking icu_properties_data v2.0.1
    Checking zerocopy v0.8.26
    Checking zerovec v0.11.2
    Checking zerotrie v0.2.2
    Checking pin-utils v0.1.0
    Checking bitflags v2.9.1
    Checking alloc-no-stdlib v2.0.4
    Checking slab v0.4.10
    Checking local-waker v0.1.4
    Checking futures-task v0.3.31
    Checking http v0.2.12
    Checking alloc-stdlib v0.2.2
    Checking tracing v0.1.41
    Checking aho-corasick v1.1.3
    Checking serde v1.0.219
    Checking futures-util v0.3.31
    Checking equivalent v1.0.2
    Checking adler2 v2.0.1
   Compiling jobserver v0.1.33
   Compiling num-conv v0.1.0
    Checking generic-array v0.14.7
    Checking parking_lot_core v0.9.11
    Checking signal-hook-registry v1.4.5
    Checking socket2 v0.5.10
    Checking parking_lot v0.12.4
   Compiling cc v1.2.27
    Checking mio v1.0.4
    Checking getrandom v0.3.3
    Checking powerfmt v0.2.0
    Checking regex-syntax v0.8.5
    Checking rand_core v0.9.3
    Checking tinystr v0.8.1
    Checking potential_utf v0.1.2
    Checking crypto-common v0.1.6
    Checking icu_collections v2.0.0
    Checking block-buffer v0.10.4
    Checking icu_locale_core v2.0.0
   Compiling time-core v0.1.4
    Checking hashbrown v0.15.4
    Checking tokio v1.45.1
    Checking digest v0.10.7
   Compiling time-macros v0.2.22
    Checking deranged v0.4.0
   Compiling bytestring v1.4.0
    Checking indexmap v2.10.0
    Checking icu_provider v2.0.0
    Checking miniz_oxide v0.8.9
    Checking ppv-lite86 v0.2.21
    Checking icu_properties v2.0.1
    Checking icu_normalizer v2.0.0
    Checking rand_chacha v0.9.0
    Checking brotli-decompressor v5.0.0
    Checking actix-utils v3.0.1
    Checking form_urlencoded v1.2.1
    Checking actix-service v2.0.3
    Checking crc32fast v1.4.2
    Checking ryu v1.0.20
    Checking cpufeatures v0.2.17
    Checking utf8_iter v1.0.4
   Compiling regex-lite v0.1.6
    Checking sha1 v0.10.6
    Checking flate2 v1.1.2
    Checking regex-automata v0.4.9
   Compiling zstd-sys v2.0.15+zstd.1.5.7
    Checking rand v0.9.1
    Checking derive_more v2.0.1
    Checking time v0.3.41
    Checking httparse v1.10.1
    Checking local-channel v0.1.5
    Checking brotli v8.0.1
    Checking encoding_rs v0.8.35
   Compiling darling_macro v0.20.11
    Checking idna_adapter v1.2.1
    Checking base64 v0.22.1
    Checking idna v1.0.3
   Compiling actix-router v0.5.3
    Checking mime v0.3.17
    Checking language-tags v0.3.2
    Checking foldhash v0.1.5
    Checking httpdate v1.0.3
    Checking url v2.5.4
    Checking serde_json v1.0.140
    Checking serde_urlencoded v0.7.1
   Compiling darling v0.20.11
   Compiling dsl_auto_type v0.1.3
    Checking pq-sys v0.7.2
    Checking byteorder v1.5.0
    Checking impl-more v0.1.9
    Checking anyhow v1.0.98
    Checking dotenvy v0.15.7
   Compiling actix-web-codegen v4.3.0
    Checking cookie v0.16.2
   Compiling diesel_derives v2.2.6
    Checking regex v1.11.1
    Checking tokio-util v0.7.15
    Checking actix-rt v2.10.0
    Checking actix-server v2.6.0
    Checking actix-codec v0.5.2
    Checking h2 v0.3.26
   Compiling zstd-safe v7.2.4
    Checking zstd v0.13.3
    Checking diesel v2.2.11
    Checking actix-http v3.11.0
    Checking actix-web v4.11.0
    Checking actix-cors v0.7.1
    Checking pgvector v0.4.1
    Checking backend v0.1.0 (/var/home/jonasrlg/code/icarusp/backend)
warning: redundant field names in struct initialization
  --> src/models/book.rs:35:13
   |
35 |             publication_year: publication_year,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `publication_year`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names
   = note: `#[warn(clippy::redundant_field_names)]` on by default

warning: variables can be used directly in the `format!` string
  --> src/database/query.rs:50:19
   |
50 |     let pattern = format!("%{}%", name);
   |                   ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
   = note: `#[warn(clippy::uninlined_format_args)]` on by default
help: change this to
   |
50 -     let pattern = format!("%{}%", name);
50 +     let pattern = format!("%{name}%");
   |

warning: variables can be used directly in the `format!` string
  --> src/database/query.rs:63:19
   |
63 |     let pattern = format!("%{}%", title);
   |                   ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
63 -     let pattern = format!("%{}%", title);
63 +     let pattern = format!("%{title}%");
   |

warning: variables can be used directly in the `format!` string
   --> src/database/query.rs:113:19
    |
113 |     let pattern = format!("%{}%", author_name);
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
113 -     let pattern = format!("%{}%", author_name);
113 +     let pattern = format!("%{author_name}%");
    |

warning: `backend` (lib) generated 4 warnings (run `cargo clippy --fix --lib -p backend` to apply 4 suggestions)
error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:251:5
    |
251 |     log::info!("Starting server at http://{}", bind_address);
    |     ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:245:13
    |
245 |             log::error!("Database connection test failed: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:243:18
    |
243 |         Ok(_) => log::info!("Database connection test successful"),
    |                  ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:225:13
    |
225 |             log::error!("Failed to search books by embedding: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:198:13
    |
198 |             log::error!("Failed to search books by author: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:178:13
    |
178 |             log::error!("Failed to search books: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:160:13
    |
160 |             log::error!("Failed to search authors: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:142:13
    |
142 |             log::error!("Failed to link book to authors: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:122:13
    |
122 |             log::error!("Failed to create book with author: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
   --> src/main.rs:109:13
    |
109 |             log::error!("Failed to create book: {}", e);
    |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `log`
  --> src/main.rs:91:13
   |
91 |             log::error!("Failed to create author: {}", e);
   |             ^^^ use of unresolved module or unlinked crate `log`

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `env_logger`
   --> src/main.rs:239:31
    |
239 |     env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));
    |                               ^^^^^^^^^^ use of unresolved module or unlinked crate `env_logger`
    |
    = help: if you wanted to use a crate named `env_logger`, use `cargo add env_logger` to add it to your `Cargo.toml`

error[E0308]: mismatched types
  --> src/main.rs:88:25
   |
88 |     match insert_author(connection, &new_author) {
   |           ------------- ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
   |           |
   |           arguments to this function are incorrect
   |
   = note: expected mutable reference `&mut diesel::PgConnection`
              found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
  --> src/database/insertion.rs:8:8
   |
8  | pub fn insert_author(conn: &mut PgConnection, new_author: &NewAuthor) -> Result<Author> {
   |        ^^^^^^^^^^^^^ -----------------------

error[E0308]: mismatched types
   --> src/main.rs:119:23
    |
119 |     match insert_book(connection, &new_book) {
    |           ----------- ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/insertion.rs:19:8
    |
19  | pub fn insert_book(conn: &mut PgConnection, new_book: &NewBook) -> Result<Book> {
    |        ^^^^^^^^^^^ -----------------------

error[E0308]: mismatched types
   --> src/main.rs:120:12
    |
119 |     match insert_book(connection, &new_book) {
    |           ---------------------------------- this expression has type `std::result::Result<models::book::Book, anyhow::Error>`
120 |         Ok((book, _book_author)) => Ok(HttpResponse::Created().json(ApiResponse::success(book))),
    |            ^^^^^^^^^^^^^^^^^^^^ expected `Book`, found `(_, _)`
    |
    = note: expected struct `models::book::Book`
                found tuple `(_, _)`

error[E0308]: mismatched types
   --> src/main.rs:139:32
    |
139 |     match link_book_to_authors(connection, req.book_id, &req.authors_ids) {
    |           -------------------- ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/insertion.rs:48:8
    |
48  | pub fn link_book_to_authors(
    |        ^^^^^^^^^^^^^^^^^^^^
49  |     conn: &mut PgConnection,
    |     -----------------------

error[E0308]: mismatched types
   --> src/main.rs:157:31
    |
157 |     match get_authors_by_name(connection, &req.name) {
    |           ------------------- ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/query.rs:49:8
    |
49  | pub fn get_authors_by_name(conn: &mut PgConnection, name: &str) -> Result<Vec<AuthorOutput>> {
    |        ^^^^^^^^^^^^^^^^^^^ -----------------------

error[E0308]: mismatched types
   --> src/main.rs:175:30
    |
175 |     match get_books_by_title(connection, &req.title) {
    |           ------------------ ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/query.rs:62:8
    |
62  | pub fn get_books_by_title(conn: &mut PgConnection, title: &str) -> Result<Vec<BookOutput>> {
    |        ^^^^^^^^^^^^^^^^^^ -----------------------

error[E0308]: mismatched types
   --> src/main.rs:195:36
    |
195 |     match get_books_by_author_name(connection, &req.author_name) {
    |           ------------------------ ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/query.rs:109:8
    |
109 | pub fn get_books_by_author_name(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^
110 |     conn: &mut PgConnection,
    |     -----------------------

error[E0308]: mismatched types
   --> src/main.rs:222:39
    |
222 |     match similarity_search_by_prompt(connection, &req.query, limit) {
    |           --------------------------- ^^^^^^^^^^ expected `&mut PgConnection`, found `&mut Result<PgConnection, Error>`
    |           |
    |           arguments to this function are incorrect
    |
    = note: expected mutable reference `&mut diesel::PgConnection`
               found mutable reference `&mut std::result::Result<diesel::PgConnection, anyhow::Error>`
note: function defined here
   --> src/database/query.rs:140:8
    |
140 | pub fn similarity_search_by_prompt(
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
141 |     conn: &mut PgConnection,
    |     -----------------------

error[E0433]: failed to resolve: use of unresolved module or unlinked crate `env_logger`
   --> src/main.rs:239:5
    |
239 |     env_logger::init_from_env(env_logger::Env::new().default_filter_or("info"));
    |     ^^^^^^^^^^ use of unresolved module or unlinked crate `env_logger`
    |
    = help: if you wanted to use a crate named `env_logger`, use `cargo add env_logger` to add it to your `Cargo.toml`

Some errors have detailed explanations: E0308, E0433.
For more information about an error, try `rustc --explain E0308`.
warning: `backend` (bin "backend") generated 1 warning (1 duplicate)
error: could not compile `backend` (bin "backend") due to 21 previous errors; 1 warning emitted
